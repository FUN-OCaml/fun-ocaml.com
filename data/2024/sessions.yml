- slug: "riot"
  title: Building reliable actor systems with OCaml and Riot
  speakers: ["leandro"]
  kind: workshop
  abstract: |
      In this workshop we'll learn about Riot and how to build systems with it by using supervision trees, processes, and message passing.

      As an example application, we will build and deploy a small web application.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: "ocsigen-eliom"
  title: Web and mobile app development in OCaml
  speakers: ["vincent"]
  kind: workshop
  abstract: |
      The Ocsigen project aims to provide OCaml with a complete set of advanced tools for creating Web and mobile apps. It is used, for example, to build the Be Sport social network.
      Ocsigen contains, among other things, an OCaml to Javascript compiler (Js_of_ocaml), an extensible Web server, a widget toolkit, and a client-server framework (Eliom). Eliom allows you to write a client-server application in a single code, running on both Web browsers and mobile devices, with automatic and type-safe communication.
      In this workshop, you will learn how to build your first application. We will present the basic principles and many examples of use cases, showing how Ocsigen can save you a lot of time.
  links:
      - title: "Ocsigen Framework"
        url: "https://ocsigen.org/"
      - title: "Slides Source Directory"
        url: "https://github.com/ocsigen/ocsigen.github.io/tree/master/talks"
  slides: "https://ocsigen.org/talks/tutochat.html"
  youtube_video: null
  watch_ocaml_org_video: null

- slug: "gamelle"
  title: "Gamelle : 2D games in OCaml"
  speakers: ["emile"]
  kind: workshop
  abstract: |
      Gamelle is a library for 2D games in OCaml, which outputs both native code and JavaScript.
      We wrote it with beginners in mind, because writing a game is a fun project to learn a programming language. This means that the library has a focus on having less to explain.
      It still has a lot of features, including a GUI-library that is practical to use for game menus, a project generator that set up all the build system rules for the dual output, a system for hot reloading with the native mode, and a very practical system for assets. We will present its design and discuss the choices made.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: concurrency-parallelism
  title: Concurrency and Parallelism in OCaml
  speakers: ["vesa", "arthur", "carine"]
  kind: workshop
  abstract: |
      OCaml 5 added support for both effects based concurrency and multicore parallelism.  In this hands-on workshop you have the opportunity to learn how to wield both of them by participating in a fun cooperative challenge to harness the distributed computation capacity of the participants and generate pretty pictures.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: image-comparison
  title:
      The story behind the fastest image comparison library in the world written
      in OCaml
  speakers: ["dmitriy"]
  kind: talk
  abstract: |
      I am the author of the https://github.com/dmtrKovalenko/odiff which claims to be and it is the fastest in the world (on my banchmarks lol) implementation of the pixel-by-pixel image comparison library which is written in OCaml (and a little bit of C).

      This is a story about standing the project. Why not to write it in C or Rust? How do we tune the garbage collector to avoid major collections at all? All this and much more like the hidden superpower of unboxed floats and some challenges about naked pointers and upgrading to OCaml v5 in my talk!
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: tiny-code-xmas
  title: Learning OCaml with Tiny Code Xmas
  speakers: ["michael"]
  kind: talk
  abstract: |
      Each year the demo community run Tiny Code Xmas - using fantasy consoles like TIC-80 and PICO-8 to teach people to do retro graphics effects and size coding. But I didn't want to learn size coding, I wanted to learn OCaml!

      So for my first OCaml project I built a small fantasy console engine using OCaml, and implemented both Tiny Code Xmas and most of Genuary (generate art January) in it. In this talk I'll show why demo coding suits functional programming, look at how I built my first OCaml library, and show some examples of generative art using it.
  links:
      - title: "Slides"
        url: "https://github.com/mdales/funocaml24"
      - title: "Claudius graphics library"
        url: "https://github.com/mdales/claudius"
      - title: "Tiny Code Christmas"
        url: "https://tcc.lovebyte.party"
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: melange
  title: A 'Melange' of Tooling Coming Together
  speakers: ["antonio"]
  kind: talk
  abstract: |
      Melange is a new compiler for OCaml targetting JavaScript. Melange codebases integrate with the OCaml Platform: install from OPAM, build with Dune, preprocess with `ppxlib`, format with OCamlformat and publish with `dune-release`. Merlin, OCaml-LSP and `odoc` work out of the box.
      In this talk, I will tell you about the Melange success story and give a glimpse of what's coming in the near future.
  links: []
  slides: "melange.pdf"
  youtube_video: null
  watch_ocaml_org_video: null

- slug: mirage-os
  title: MirageOS - developing operating systems in OCaml
  speakers: ["hannes"]
  kind: talk
  abstract: |
      OCaml is a great systems programming language. We use it since more than a decade to develop MirageOS unikernels: run OCaml as a virtual machine, no Linux kernel involved. Since OCaml is statically typed (and type safe), and memory safe, we use a single address space, and avoided a lot of complexity of general purpose operating systems. Security-wise this is excellent: less attack surface, fewer attack vectors. Also less resource-heavy than contemporary OS.

      The result are tiny unikernels (e.g. a firewall with ~3MB as the full virtual machine image) that only contain the code really needed.

      I'll present what MirageOS is today and where it is used, its future, and our learnings so far.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: ocannl
  title: OCANNL, the `neural_nets_lib`. Mysteries of NNs training unveiled in OCaml
  speakers: ["lukasz"]
  kind: talk
  abstract: |
      Using [OCANNL](https://github.com/ahrefs/ocannl), we will build a toy feed forward network, we will train it, visualize its outputs. We will take a peek at the actual computation generated at various levels of abstraction: tensor node assignments, optimized C-language-like programs, translations to actual C (for CPUs, or CUDA but it is still work-in-progress). Lastly, we will parallelize training across multiple devices.
  links:
      - title: "OCANNL Project"
        url: "https://github.com/ahrefs/ocannl"
  slides: "https://docs.google.com/presentation/d/1AVpHvuA7EpK6qZIMqym_odC1-JlydM0XALaM0WpXakk/pub?start=false&loop=false&delayms=10000&slide=id.p"
  youtube_video: null
  watch_ocaml_org_video: null

- slug: universal-react
  title: Universal React in OCaml
  speakers: ["davesnx"]
  kind: talk
  abstract: |
      server-reason-react implements react-dom/server and some of React's internals in OCaml. Its purpose is to natively render HTML markup from the server for a Reason React application. This pushes the idea for universal code (sharing code between the browser and native) and this talk is the story of all of this, and what are the solutions we applied at Ahrefs.
  links: []
  slides: https://docs.google.com/presentation/d/1woIM-OXBljjMUnC1hq-YBuIdeTihX6JotTRPmkVwN6k/edit?slide=id.p#slide=id.p
  youtube_video: null
  watch_ocaml_org_video: null

- slug: journey-of-growth
  title:
      Maybe OCaml Was the Friends We Made Along the Way; A Journey of Growth in
      Software Engineering
  speakers: ["dillon"]
  kind: talk
  abstract: |
      In my decade-long journey as a software engineer, the most transformative experience came from an unexpected source: learning and using OCaml. I will share how this functional programming language reshaped my approach to problem-solving, coding practices, and overall mindset about programming. Beyond the technical skills, OCaml connected me with incredibly bright, kind, and talented mentors and peers who have become lifelong friends. This journey also paved the way for my success on Twitch, allowing me to share my passion and knowledge with a broader audience. Join me as I explore the personal and professional growth that OCaml facilitated and celebrate the community that made it possible.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: let-signals
  title: Let Signals in OCaml
  speakers: ["rizo"]
  kind: talk
  abstract: |
      Signals and fine-grained reactivity are two popular concepts in the JavaScript world, thanks to their simplicity, ergonomics and excellent performance.

      What are signals? What is their type? How can we use them in OCaml?

      Let's build a reactive UI library from scratch to find out! From simple callbacks, layers are added to support batching, resource cleanup and `let` syntax for composing effects. DOM interactions are implemented to allow predictable, minimal and efficient UI updates.

      Finally, helix is revealed, a library based on the presented reactivity principles. I review some examples and discuss how helix is used to implement real-world applications at Hyper and Tarides.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: multicore-gc
  title: How the Multicore Garbage Collector works
  speakers: ["sudha"]
  kind: talk
  abstract: |
      In a first, OCaml 5.0 shipped with native support for parallelism and concurrency. This was a multi-year effort by the Multicore team and the OCaml development team that culminated in OCaml 5.0. There are two key components to this: parallelism via Domains and concurrency via fibers.

      Let's focus on the first part for now. The most challenging aspect was designing a multicore-capable garbage collector that remains backwards compatible in terms of features, performance, and latency. This is described in the paper 'Retrofitting Parallelism onto OCaml,' which appeared in ICFP 2020. In this talk, we will explore the ideas presented in the paper through doodle illustrations and zines.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: odoc
  title: Using odoc to write documentation
  speakers: ["paul-elliot"]
  kind: talk
  abstract: |
      This talk is a gentle introduction to the documenting part of the OCaml ecosystem.
      We will see how to use `odoc` to build nice documentation for your `dune`-based project, from a bare repository to a documentation with both API pages and documentation pages.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: incremental-data-pipelines
  title:
      Building Incremental and Reproducible Data Pipelines for Tackling Climate
      Change
  speakers: ["patrick", "michael"]
  kind: talk
  abstract: |
      We present the good and the bad of building a dataflow engine in OCaml. The engine underpins a complex ecological analysis of avoided deforestation projects in tropical moist rainforests. We will discuss:

      - Onboarding experienced developers who are new to OCaml.
      - Building an operating system in OCaml to run Python/R code.
      - Developing geospatial libraries and how this benefited from Outreachy internships and the compiler's backwards compatibility.
      - Managing a transition from monadic, asynchronous libraries to direct-style code.

      This work is part of a multi-year collaboration between the departments of Computer Science, Ecology, Zoology and Geography at the University of Cambridge.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: type-engineering
  title: Type engineering in OCaml, illustrated on the OCaml compiler
  speakers: ["florian"]
  kind: talk
  abstract: |
      With four different kinds of variants and four different implementations of an object system, OCaml provides many options to design types to fit domain problems. However, it can be sometimes tempting to escalate type complexity, at the cost of code readability. It is therefore important to find a compromise between code complexity and type safety, in order to not let GADTs escape their scope. As a showcase, this talk proposes to review the use of advanced type features in the oldest OCaml project: the OCaml compiler
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: dune
  title: The Dune Mental Model
  speakers: ["etienne"]
  kind: talk
  abstract: |
      Dune is a build system for OCaml projects. But what is a build system?
      "It rebuilds just the necessary parts" is a good start, but it can be useful to understand the underlying model and write dune files that are performant and simple.
      The building block of Dune is the rule: a rule reads dependencies and writes targets using an action (and it can be attached to aliases).
      In this talk, I will walk the audience through how "dune build" operates. I will explain the concepts of rules, dependencies, targets, actions, and aliases. Then we'll see how dune files are interpreted to determine the rules that apply to the project. And finally, how Dune determines how to build the required targets.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: easy-gadts
  title: '"Easy" GADT''s by repeating yourself'
  speakers: ["eduardo"]
  kind: talk
  abstract: |
      Traditionally GADT's are used for lightweight tasks as the code complexity increases quite. I will be arguing that this is mostly a lack of common "design patterns" and maybe some tools.

      The talk will go through describing what you can fundamentally do with GADT's, how you should think about them and a general technique to mimick dependent types in OCaml,

      Hopefully by the end, a show case of a proposal for the Michelson interpreter.
  links: []
  slides: "easy-gadts.pdf"
  youtube_video: null
  watch_ocaml_org_video: null

- slug: hands-on-mirageos
  title: Hands-on MirageOS
  speakers: ["hannes"]
  kind: workshop
  abstract: |
      We will develop a MirageOS unikernel from scratch. At the beginning, we'll decide what kind of unikernel we develop (HTTP service, something DNS related, TLS, a remote ssh terminal).

      We will dive into compilation and execution of the unikernel - also how to modify the code of the unikernel or any dependent library.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null

- slug: machine-learning
  title: Machine Learning in OCaml
  speakers: ["tarun"]
  kind: talk
  abstract: |
      Building a transformer in OCaml using JAX bindings.
  links: []
  slides: null
  youtube_video: null
  watch_ocaml_org_video: null
